// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: arithmetic_service.proto
#ifndef GRPC_arithmetic_5fservice_2eproto__INCLUDED
#define GRPC_arithmetic_5fservice_2eproto__INCLUDED

#include "arithmetic_service.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace Arithmetic {

// gRpc interface
//
class Interface final {
 public:
  static constexpr char const* service_full_name() {
    return "Arithmetic.Interface";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetSum(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::Arithmetic::RspOperand* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>> AsyncGetSum(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>>(AsyncGetSumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>> PrepareAsyncGetSum(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>>(PrepareAsyncGetSumRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSub(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::Arithmetic::RspOperand* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>> AsyncGetSub(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>>(AsyncGetSubRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>> PrepareAsyncGetSub(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>>(PrepareAsyncGetSubRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>* AsyncGetSumRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>* PrepareAsyncGetSumRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>* AsyncGetSubRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Arithmetic::RspOperand>* PrepareAsyncGetSubRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetSum(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::Arithmetic::RspOperand* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>> AsyncGetSum(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>>(AsyncGetSumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>> PrepareAsyncGetSum(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>>(PrepareAsyncGetSumRaw(context, request, cq));
    }
    ::grpc::Status GetSub(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::Arithmetic::RspOperand* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>> AsyncGetSub(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>>(AsyncGetSubRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>> PrepareAsyncGetSub(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>>(PrepareAsyncGetSubRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>* AsyncGetSumRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>* PrepareAsyncGetSumRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>* AsyncGetSubRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>* PrepareAsyncGetSubRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSub_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetSum(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response);
    virtual ::grpc::Status GetSub(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSum() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSum(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSum(::grpc::ServerContext* context, ::Arithmetic::ReqOperand* request, ::grpc::ServerAsyncResponseWriter< ::Arithmetic::RspOperand>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSub() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSub(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSub(::grpc::ServerContext* context, ::Arithmetic::ReqOperand* request, ::grpc::ServerAsyncResponseWriter< ::Arithmetic::RspOperand>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSum<WithAsyncMethod_GetSub<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSum() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSum(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSub() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSub(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSum() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSum(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSub() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSub(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSub(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSum() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Arithmetic::ReqOperand, ::Arithmetic::RspOperand>(std::bind(&WithStreamedUnaryMethod_GetSum<BaseClass>::StreamedGetSum, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSum(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arithmetic::ReqOperand,::Arithmetic::RspOperand>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSub() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Arithmetic::ReqOperand, ::Arithmetic::RspOperand>(std::bind(&WithStreamedUnaryMethod_GetSub<BaseClass>::StreamedGetSub, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSub(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSub(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Arithmetic::ReqOperand,::Arithmetic::RspOperand>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSum<WithStreamedUnaryMethod_GetSub<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSum<WithStreamedUnaryMethod_GetSub<Service > > StreamedService;
};

}  // namespace Arithmetic


#endif  // GRPC_arithmetic_5fservice_2eproto__INCLUDED
