// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: arithmetic_service.proto

#include "arithmetic_service.pb.h"
#include "arithmetic_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Arithmetic {

static const char* Interface_method_names[] = {
  "/Arithmetic.Interface/GetSum",
  "/Arithmetic.Interface/GetSub",
};

std::unique_ptr< Interface::Stub> Interface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Interface::Stub> stub(new Interface::Stub(channel));
  return stub;
}

Interface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetSum_(Interface_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSub_(Interface_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Interface::Stub::GetSum(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::Arithmetic::RspOperand* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSum_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>* Interface::Stub::AsyncGetSumRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Arithmetic::RspOperand>::Create(channel_.get(), cq, rpcmethod_GetSum_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>* Interface::Stub::PrepareAsyncGetSumRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Arithmetic::RspOperand>::Create(channel_.get(), cq, rpcmethod_GetSum_, context, request, false);
}

::grpc::Status Interface::Stub::GetSub(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::Arithmetic::RspOperand* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSub_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>* Interface::Stub::AsyncGetSubRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Arithmetic::RspOperand>::Create(channel_.get(), cq, rpcmethod_GetSub_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Arithmetic::RspOperand>* Interface::Stub::PrepareAsyncGetSubRaw(::grpc::ClientContext* context, const ::Arithmetic::ReqOperand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Arithmetic::RspOperand>::Create(channel_.get(), cq, rpcmethod_GetSub_, context, request, false);
}

Interface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::Arithmetic::ReqOperand, ::Arithmetic::RspOperand>(
          std::mem_fn(&Interface::Service::GetSum), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::Arithmetic::ReqOperand, ::Arithmetic::RspOperand>(
          std::mem_fn(&Interface::Service::GetSub), this)));
}

Interface::Service::~Service() {
}

::grpc::Status Interface::Service::GetSum(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::GetSub(::grpc::ServerContext* context, const ::Arithmetic::ReqOperand* request, ::Arithmetic::RspOperand* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Arithmetic

